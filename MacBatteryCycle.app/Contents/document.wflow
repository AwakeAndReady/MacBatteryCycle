<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>AMApplicationBuild</key>
	<string>521.1</string>
	<key>AMApplicationVersion</key>
	<string>2.10</string>
	<key>AMDocumentVersion</key>
	<string>2</string>
	<key>actions</key>
	<array>
		<dict>
			<key>action</key>
			<dict>
				<key>AMAccepts</key>
				<dict>
					<key>Container</key>
					<string>List</string>
					<key>Optional</key>
					<true/>
					<key>Types</key>
					<array>
						<string>com.apple.applescript.object</string>
					</array>
				</dict>
				<key>AMActionVersion</key>
				<string>1.0.2</string>
				<key>AMApplication</key>
				<array>
					<string>Automator</string>
				</array>
				<key>AMParameterProperties</key>
				<dict>
					<key>source</key>
					<dict/>
				</dict>
				<key>AMProvides</key>
				<dict>
					<key>Container</key>
					<string>List</string>
					<key>Types</key>
					<array>
						<string>com.apple.applescript.object</string>
					</array>
				</dict>
				<key>ActionBundlePath</key>
				<string>/System/Library/Automator/Run AppleScript.action</string>
				<key>ActionName</key>
				<string>AppleScript ausführen</string>
				<key>ActionParameters</key>
				<dict>
					<key>source</key>
					<string>(* MacBatteryCycleThis script automates the process of battery management, optimizing battery health by controlling cyclical charging and discharging based on user-defined thresholds. It begins by checking if a specific Bash script (battery_cycle.sh) is already running, preventing duplicate instances. If not running, it prompts the user to decide whether to enable battery discharging when a certain upper limit is reached. Based on the user's choice, it then allows the selection of upper and lower battery limits. After determining the correct path to the Bash script, it executes this script in the Terminal with the specified parameters. *)tell application "System Events"	try		set scriptRunning to do shell script "ps aux | grep '[b]attery_cycle.sh' | wc -l | tr -d ' '"		if scriptRunning is not "0" then			display dialog "Mac Battery Cycle is already running." buttons {"OK"} default button "OK"			return		end if	on error errMsg number errNum		display dialog "Error checking script status: " &amp; errMsg &amp; " (Error " &amp; errNum &amp; ")" buttons {"OK"} default button "OK"		return	end tryend telltell application "System Events"	try		display dialog "Do you want to allow battery discharging once the Upper limit is reached?" buttons {"Yes", "No", "Cancel"} default button "No" cancel button "Cancel" with title "MacBatteryCycle"		set userChoice to button returned of the result	on error		-- User clicked "Cancel", terminate the script		return	end tryend tellif userChoice is "Yes" or userChoice is "No" then	set upperLimitChoices to {"50", "60", "70", "75", "80", "85", "90", "95", "100"}	set lowerLimitChoices to {"5", "10", "20", "25", "30", "40", "50", "60", "65"}		-- User selects the upper limit	set upperLimit to choose from list upperLimitChoices with title "Select Upper Battery Limit (%)" default items {"75"}	if upperLimit is false then		-- User cancelled the upper limit selection		return	end if		set upperLimitValue to item 1 of upperLimit	set filteredLowerLimitChoices to {}		-- Filter lower limit choices based on the selected upper limit	repeat with i from 1 to count of lowerLimitChoices		if item i of lowerLimitChoices as number ≤ upperLimitValue as number then			set end of filteredLowerLimitChoices to item i of lowerLimitChoices		end if	end repeat		-- User selects the lower limit from the filtered choices	set lowerLimit to choose from list filteredLowerLimitChoices with title "Select Lower Battery Limit (%)" default items {"25"}	if lowerLimit is false then		-- User cancelled the lower limit selection		return	end if		set lowerLimitValue to item 1 of lowerLimitend iftell application "Finder"	set current_path to (POSIX path of (container of (path to me) as alias)) &amp; "MacBatteryCycle.app/Contents"end telldisplay dialog "Check for logs in " &amp; current_path buttons {"OK"}tell application "Terminal"	if userChoice is "Yes" then		do script "cd " &amp; quoted form of current_path &amp; " &amp;&amp; bash battery_cycle.sh --discharge --upper " &amp; upperLimitValue &amp; " --lower " &amp; lowerLimitValue	else if userChoice is "No" then		do script "cd " &amp; quoted form of current_path &amp; " &amp;&amp; bash battery_cycle.sh --upper " &amp; upperLimitValue &amp; " --lower " &amp; lowerLimitValue	end ifend tell</string>
				</dict>
				<key>BundleIdentifier</key>
				<string>com.apple.Automator.RunScript</string>
				<key>CFBundleVersion</key>
				<string>1.0.2</string>
				<key>CanShowSelectedItemsWhenRun</key>
				<false/>
				<key>CanShowWhenRun</key>
				<true/>
				<key>Category</key>
				<array>
					<string>AMCategoryUtilities</string>
				</array>
				<key>Class Name</key>
				<string>RunScriptAction</string>
				<key>InputUUID</key>
				<string>D002A3A0-9ADC-41D1-BED8-0537B0155F73</string>
				<key>Keywords</key>
				<array>
					<string>Ausführen</string>
				</array>
				<key>OutputUUID</key>
				<string>7851C6F6-53E5-4286-B85F-0033AA6B2126</string>
				<key>ShowWhenRun</key>
				<false/>
				<key>UUID</key>
				<string>5B37DE14-2317-43C4-9157-2DD5A54B6161</string>
				<key>UnlocalizedApplications</key>
				<array>
					<string>Automator</string>
				</array>
				<key>arguments</key>
				<dict>
					<key>0</key>
					<dict>
						<key>default value</key>
						<string>on run {input, parameters}
	
	(* Your script goes here *)
	
	return input
end run</string>
						<key>name</key>
						<string>source</string>
						<key>required</key>
						<string>0</string>
						<key>type</key>
						<string>0</string>
						<key>uuid</key>
						<string>0</string>
					</dict>
				</dict>
				<key>isViewVisible</key>
				<integer>1</integer>
				<key>location</key>
				<string>432.000000:634.000000</string>
				<key>nibPath</key>
				<string>/System/Library/Automator/Run AppleScript.action/Contents/Resources/Base.lproj/main.nib</string>
			</dict>
			<key>isViewVisible</key>
			<integer>1</integer>
		</dict>
	</array>
	<key>connectors</key>
	<dict/>
	<key>workflowMetaData</key>
	<dict>
		<key>workflowTypeIdentifier</key>
		<string>com.apple.Automator.application</string>
	</dict>
</dict>
</plist>
